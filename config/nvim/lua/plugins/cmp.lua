local cmp_status_ok, cmp = pcall(require, "cmp")
if not cmp_status_ok then
  return
end
-- luasnip setup
local snip_status_ok, luasnip = pcall(require, "luasnip")
if not snip_status_ok then
  return
end

local check_backspace = function()  --for Tab
  local col = vim.fn.col "." - 1
  return col == 0 or vim.fn.getline("."):sub(col, col):match "%s"
end
--local lspkind = require('lspkind')
local kind_icons = {
  Text = "Ôùæ",
  Method = "m",
  Function = "Ôûî",
  Constructor = "Ôê•",
  Field = "Óúñ",
  Variable = "Ôö¶",
  Class = "Ô†ñ",
  Interface = "ÔÉ®",
  Module = "Ôíá",
  Property = "ÔÇ≠",
  Unit = "Óàü",
  Value = "Ô¢ü",
  Enum = "ÔÖù",
  Keyword = "Ô†ä",
  Snippet = "ÔÉÑ",
  Color = "Ô£ó",
  File = "Ôúò",
  Reference = "ÔíÅ",
  Folder = "Ôùä",
  EnumMember = "ÔÖù",
  Constant = "Ôõº",
  Struct = "ÔÜ≥",
  Event = "ÔÉß",
  Operator = "Ôöî",
  TypeParameter = "ÔûÉ",
}
cmp.setup{
	snippet = {
	  -- REQUIRED - you must specify a snippet engine
		expand = function(args)
			require'luasnip'.lsp_expand(args.body) -- Luasnip expand
		end,
	},
	-- –ö–ª–∞–≤–∏—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ nvim-cmp
	mapping = {
		-- –í—ã–∑–æ–≤ –º–µ–Ω—é –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
		['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
		--['<CR>'] = cmp.config.disable,                      -- –Ø –Ω–µ –ª—é–±–ª—é, –∫–æ–≥–¥–∞ –≤–µ—â–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ <Enter>
		--['<C-y>'] = cmp.mapping.confirm({ select = true }), -- –ê –≤–æ—Ç –Ω–∞ <C-y> –≤–ø–æ–ª–Ω–µ –æ–∫
		['<Return>'] = cmp.mapping.confirm({ select = true }),
		-- –ò—Å–ø–æ–ª—å–∑—É–µ–º <C-e> –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
		['<C-e>'] = cmp.mapping({
			i = cmp.mapping.abort(), -- –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
			c = cmp.mapping.close(), -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
		}),
		['<C-k>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 'c' }),
		['<C-j>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 'c' }),
    ['<C-d>'] = cmp.mapping.scroll_docs(-1),
    ['<C-f>'] = cmp.mapping.scroll_docs(1),
    ["<Tab>"] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expandable() then
        luasnip.expand()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      elseif check_backspace() then
        fallback()
      else
        fallback()
      end
    end, { "i", "s", }),
    ["<S-Tab>"] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
     end
    end, {"i", "s", }),
  },
	sources = cmp.config.sources{
		{ name = 'nvim_lsp' },                -- LSP üëÑ
		{ name = 'nvim_lsp_signature_help' }, -- –ü–æ–º–æ—â—å –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–µ—Ç–æ–¥–∞—Ö üöÅ
		{ name = 'luasnip' },                 -- Luasnip üêå
		{ name = 'buffer' },                  -- –ë—É—Ñ—Ñ–µ—Ä—ã üêÉ
		{ name = 'path' },                    -- –ü—É—Ç–∏ ü™§
		--{ name = "emoji" },                   -- –≠–º–æ–¥–∑–∏ üò≥
  },
  formatting = {
    fields = { "kind", "abbr", "menu" },
    format = function(entry, vim_item)
      -- Kind icons
      vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
      -- vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind
      vim_item.menu = ({
        nvim_lsp = "[LSP]",
        nvim_lua = "[NVIM_LUA]",
        luasnip = "[Snippet]",
        buffer = "[Buffer]",
        path = "[Path]",
      })[entry.source.name]
      return vim_item
    end,
  },

  window = {
    completion = cmp.config.window.bordered({
      side_padding = 0,
      col_offset = -1
    }),
    documentation = {
        border = { "‚ï≠", "‚îÄ", "‚ïÆ", "‚îÇ", "‚ïØ", "‚îÄ", "‚ï∞", "‚îÇ" },
    }
  },
}
